// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/album/frame.proto

package album

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for FrameService service

type FrameService interface {
	AddOne(ctx context.Context, in *ReqFrameAdd, opts ...client.CallOption) (*ReplyFrameInfo, error)
	UpdateBase(ctx context.Context, in *ReqFrameUpdate, opts ...client.CallOption) (*ReplyInfo, error)
	RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
	GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyFrameInfo, error)
	Search(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyFrameList, error)
	GetListByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyFrameList, error)
	GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error)
	UpdateByFilter(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyInfo, error)
}

type frameService struct {
	c    client.Client
	name string
}

func NewFrameService(name string, c client.Client) FrameService {
	return &frameService{
		c:    c,
		name: name,
	}
}

func (c *frameService) AddOne(ctx context.Context, in *ReqFrameAdd, opts ...client.CallOption) (*ReplyFrameInfo, error) {
	req := c.c.NewRequest(c.name, "FrameService.AddOne", in)
	out := new(ReplyFrameInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameService) UpdateBase(ctx context.Context, in *ReqFrameUpdate, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "FrameService.UpdateBase", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameService) RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "FrameService.RemoveOne", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameService) GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyFrameInfo, error) {
	req := c.c.NewRequest(c.name, "FrameService.GetOne", in)
	out := new(ReplyFrameInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameService) Search(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyFrameList, error) {
	req := c.c.NewRequest(c.name, "FrameService.Search", in)
	out := new(ReplyFrameList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameService) GetListByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyFrameList, error) {
	req := c.c.NewRequest(c.name, "FrameService.GetListByFilter", in)
	out := new(ReplyFrameList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameService) GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error) {
	req := c.c.NewRequest(c.name, "FrameService.GetStatistic", in)
	out := new(ReplyStatistic)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameService) UpdateByFilter(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "FrameService.UpdateByFilter", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FrameService service

type FrameServiceHandler interface {
	AddOne(context.Context, *ReqFrameAdd, *ReplyFrameInfo) error
	UpdateBase(context.Context, *ReqFrameUpdate, *ReplyInfo) error
	RemoveOne(context.Context, *RequestInfo, *ReplyInfo) error
	GetOne(context.Context, *RequestInfo, *ReplyFrameInfo) error
	Search(context.Context, *RequestInfo, *ReplyFrameList) error
	GetListByFilter(context.Context, *RequestFilter, *ReplyFrameList) error
	GetStatistic(context.Context, *RequestFilter, *ReplyStatistic) error
	UpdateByFilter(context.Context, *RequestUpdate, *ReplyInfo) error
}

func RegisterFrameServiceHandler(s server.Server, hdlr FrameServiceHandler, opts ...server.HandlerOption) error {
	type frameService interface {
		AddOne(ctx context.Context, in *ReqFrameAdd, out *ReplyFrameInfo) error
		UpdateBase(ctx context.Context, in *ReqFrameUpdate, out *ReplyInfo) error
		RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
		GetOne(ctx context.Context, in *RequestInfo, out *ReplyFrameInfo) error
		Search(ctx context.Context, in *RequestInfo, out *ReplyFrameList) error
		GetListByFilter(ctx context.Context, in *RequestFilter, out *ReplyFrameList) error
		GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error
		UpdateByFilter(ctx context.Context, in *RequestUpdate, out *ReplyInfo) error
	}
	type FrameService struct {
		frameService
	}
	h := &frameServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&FrameService{h}, opts...))
}

type frameServiceHandler struct {
	FrameServiceHandler
}

func (h *frameServiceHandler) AddOne(ctx context.Context, in *ReqFrameAdd, out *ReplyFrameInfo) error {
	return h.FrameServiceHandler.AddOne(ctx, in, out)
}

func (h *frameServiceHandler) UpdateBase(ctx context.Context, in *ReqFrameUpdate, out *ReplyInfo) error {
	return h.FrameServiceHandler.UpdateBase(ctx, in, out)
}

func (h *frameServiceHandler) RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.FrameServiceHandler.RemoveOne(ctx, in, out)
}

func (h *frameServiceHandler) GetOne(ctx context.Context, in *RequestInfo, out *ReplyFrameInfo) error {
	return h.FrameServiceHandler.GetOne(ctx, in, out)
}

func (h *frameServiceHandler) Search(ctx context.Context, in *RequestInfo, out *ReplyFrameList) error {
	return h.FrameServiceHandler.Search(ctx, in, out)
}

func (h *frameServiceHandler) GetListByFilter(ctx context.Context, in *RequestFilter, out *ReplyFrameList) error {
	return h.FrameServiceHandler.GetListByFilter(ctx, in, out)
}

func (h *frameServiceHandler) GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error {
	return h.FrameServiceHandler.GetStatistic(ctx, in, out)
}

func (h *frameServiceHandler) UpdateByFilter(ctx context.Context, in *RequestUpdate, out *ReplyInfo) error {
	return h.FrameServiceHandler.UpdateByFilter(ctx, in, out)
}
