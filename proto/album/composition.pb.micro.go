// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/album/composition.proto

package album

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for CompositionService service

type CompositionService interface {
	AddOne(ctx context.Context, in *ReqCompositionAdd, opts ...client.CallOption) (*ReplyCompositionInfo, error)
	UpdateBase(ctx context.Context, in *ReqCompositionUpdate, opts ...client.CallOption) (*ReplyInfo, error)
	RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
	GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyCompositionInfo, error)
	Search(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyCompositionList, error)
	GetListBy(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyCompositionList, error)
	GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error)
	UpdateBy(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyInfo, error)
	SetSlot(ctx context.Context, in *ReqCompositionSlots, opts ...client.CallOption) (*ReplyCompositionSlots, error)
}

type compositionService struct {
	c    client.Client
	name string
}

func NewCompositionService(name string, c client.Client) CompositionService {
	return &compositionService{
		c:    c,
		name: name,
	}
}

func (c *compositionService) AddOne(ctx context.Context, in *ReqCompositionAdd, opts ...client.CallOption) (*ReplyCompositionInfo, error) {
	req := c.c.NewRequest(c.name, "CompositionService.AddOne", in)
	out := new(ReplyCompositionInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositionService) UpdateBase(ctx context.Context, in *ReqCompositionUpdate, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "CompositionService.UpdateBase", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositionService) RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "CompositionService.RemoveOne", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositionService) GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyCompositionInfo, error) {
	req := c.c.NewRequest(c.name, "CompositionService.GetOne", in)
	out := new(ReplyCompositionInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositionService) Search(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyCompositionList, error) {
	req := c.c.NewRequest(c.name, "CompositionService.Search", in)
	out := new(ReplyCompositionList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositionService) GetListBy(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyCompositionList, error) {
	req := c.c.NewRequest(c.name, "CompositionService.GetListBy", in)
	out := new(ReplyCompositionList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositionService) GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error) {
	req := c.c.NewRequest(c.name, "CompositionService.GetStatistic", in)
	out := new(ReplyStatistic)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositionService) UpdateBy(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "CompositionService.UpdateBy", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositionService) SetSlot(ctx context.Context, in *ReqCompositionSlots, opts ...client.CallOption) (*ReplyCompositionSlots, error) {
	req := c.c.NewRequest(c.name, "CompositionService.SetSlot", in)
	out := new(ReplyCompositionSlots)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CompositionService service

type CompositionServiceHandler interface {
	AddOne(context.Context, *ReqCompositionAdd, *ReplyCompositionInfo) error
	UpdateBase(context.Context, *ReqCompositionUpdate, *ReplyInfo) error
	RemoveOne(context.Context, *RequestInfo, *ReplyInfo) error
	GetOne(context.Context, *RequestInfo, *ReplyCompositionInfo) error
	Search(context.Context, *RequestInfo, *ReplyCompositionList) error
	GetListBy(context.Context, *RequestFilter, *ReplyCompositionList) error
	GetStatistic(context.Context, *RequestFilter, *ReplyStatistic) error
	UpdateBy(context.Context, *RequestUpdate, *ReplyInfo) error
	SetSlot(context.Context, *ReqCompositionSlots, *ReplyCompositionSlots) error
}

func RegisterCompositionServiceHandler(s server.Server, hdlr CompositionServiceHandler, opts ...server.HandlerOption) error {
	type compositionService interface {
		AddOne(ctx context.Context, in *ReqCompositionAdd, out *ReplyCompositionInfo) error
		UpdateBase(ctx context.Context, in *ReqCompositionUpdate, out *ReplyInfo) error
		RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
		GetOne(ctx context.Context, in *RequestInfo, out *ReplyCompositionInfo) error
		Search(ctx context.Context, in *RequestInfo, out *ReplyCompositionList) error
		GetListBy(ctx context.Context, in *RequestFilter, out *ReplyCompositionList) error
		GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error
		UpdateBy(ctx context.Context, in *RequestUpdate, out *ReplyInfo) error
		SetSlot(ctx context.Context, in *ReqCompositionSlots, out *ReplyCompositionSlots) error
	}
	type CompositionService struct {
		compositionService
	}
	h := &compositionServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CompositionService{h}, opts...))
}

type compositionServiceHandler struct {
	CompositionServiceHandler
}

func (h *compositionServiceHandler) AddOne(ctx context.Context, in *ReqCompositionAdd, out *ReplyCompositionInfo) error {
	return h.CompositionServiceHandler.AddOne(ctx, in, out)
}

func (h *compositionServiceHandler) UpdateBase(ctx context.Context, in *ReqCompositionUpdate, out *ReplyInfo) error {
	return h.CompositionServiceHandler.UpdateBase(ctx, in, out)
}

func (h *compositionServiceHandler) RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.CompositionServiceHandler.RemoveOne(ctx, in, out)
}

func (h *compositionServiceHandler) GetOne(ctx context.Context, in *RequestInfo, out *ReplyCompositionInfo) error {
	return h.CompositionServiceHandler.GetOne(ctx, in, out)
}

func (h *compositionServiceHandler) Search(ctx context.Context, in *RequestInfo, out *ReplyCompositionList) error {
	return h.CompositionServiceHandler.Search(ctx, in, out)
}

func (h *compositionServiceHandler) GetListBy(ctx context.Context, in *RequestFilter, out *ReplyCompositionList) error {
	return h.CompositionServiceHandler.GetListBy(ctx, in, out)
}

func (h *compositionServiceHandler) GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error {
	return h.CompositionServiceHandler.GetStatistic(ctx, in, out)
}

func (h *compositionServiceHandler) UpdateBy(ctx context.Context, in *RequestUpdate, out *ReplyInfo) error {
	return h.CompositionServiceHandler.UpdateBy(ctx, in, out)
}

func (h *compositionServiceHandler) SetSlot(ctx context.Context, in *ReqCompositionSlots, out *ReplyCompositionSlots) error {
	return h.CompositionServiceHandler.SetSlot(ctx, in, out)
}
