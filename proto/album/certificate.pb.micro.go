// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/album/certificate.proto

package album

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for CertificateService service

type CertificateService interface {
	AddOne(ctx context.Context, in *ReqCertificateAdd, opts ...client.CallOption) (*ReplyCertificateInfo, error)
	UpdateBase(ctx context.Context, in *ReqCertificateUpdate, opts ...client.CallOption) (*ReplyInfo, error)
	RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
	GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyCertificateInfo, error)
	Search(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyCertificateList, error)
	GetListByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyCertificateList, error)
	GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error)
	UpdateByFilter(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyInfo, error)
	UpdateStatus(ctx context.Context, in *RequestIntFlag, opts ...client.CallOption) (*ReplyInfo, error)
}

type certificateService struct {
	c    client.Client
	name string
}

func NewCertificateService(name string, c client.Client) CertificateService {
	return &certificateService{
		c:    c,
		name: name,
	}
}

func (c *certificateService) AddOne(ctx context.Context, in *ReqCertificateAdd, opts ...client.CallOption) (*ReplyCertificateInfo, error) {
	req := c.c.NewRequest(c.name, "CertificateService.AddOne", in)
	out := new(ReplyCertificateInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateService) UpdateBase(ctx context.Context, in *ReqCertificateUpdate, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "CertificateService.UpdateBase", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateService) RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "CertificateService.RemoveOne", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateService) GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyCertificateInfo, error) {
	req := c.c.NewRequest(c.name, "CertificateService.GetOne", in)
	out := new(ReplyCertificateInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateService) Search(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyCertificateList, error) {
	req := c.c.NewRequest(c.name, "CertificateService.Search", in)
	out := new(ReplyCertificateList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateService) GetListByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyCertificateList, error) {
	req := c.c.NewRequest(c.name, "CertificateService.GetListByFilter", in)
	out := new(ReplyCertificateList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateService) GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error) {
	req := c.c.NewRequest(c.name, "CertificateService.GetStatistic", in)
	out := new(ReplyStatistic)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateService) UpdateByFilter(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "CertificateService.UpdateByFilter", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateService) UpdateStatus(ctx context.Context, in *RequestIntFlag, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "CertificateService.UpdateStatus", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CertificateService service

type CertificateServiceHandler interface {
	AddOne(context.Context, *ReqCertificateAdd, *ReplyCertificateInfo) error
	UpdateBase(context.Context, *ReqCertificateUpdate, *ReplyInfo) error
	RemoveOne(context.Context, *RequestInfo, *ReplyInfo) error
	GetOne(context.Context, *RequestInfo, *ReplyCertificateInfo) error
	Search(context.Context, *RequestInfo, *ReplyCertificateList) error
	GetListByFilter(context.Context, *RequestFilter, *ReplyCertificateList) error
	GetStatistic(context.Context, *RequestFilter, *ReplyStatistic) error
	UpdateByFilter(context.Context, *RequestUpdate, *ReplyInfo) error
	UpdateStatus(context.Context, *RequestIntFlag, *ReplyInfo) error
}

func RegisterCertificateServiceHandler(s server.Server, hdlr CertificateServiceHandler, opts ...server.HandlerOption) error {
	type certificateService interface {
		AddOne(ctx context.Context, in *ReqCertificateAdd, out *ReplyCertificateInfo) error
		UpdateBase(ctx context.Context, in *ReqCertificateUpdate, out *ReplyInfo) error
		RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
		GetOne(ctx context.Context, in *RequestInfo, out *ReplyCertificateInfo) error
		Search(ctx context.Context, in *RequestInfo, out *ReplyCertificateList) error
		GetListByFilter(ctx context.Context, in *RequestFilter, out *ReplyCertificateList) error
		GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error
		UpdateByFilter(ctx context.Context, in *RequestUpdate, out *ReplyInfo) error
		UpdateStatus(ctx context.Context, in *RequestIntFlag, out *ReplyInfo) error
	}
	type CertificateService struct {
		certificateService
	}
	h := &certificateServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CertificateService{h}, opts...))
}

type certificateServiceHandler struct {
	CertificateServiceHandler
}

func (h *certificateServiceHandler) AddOne(ctx context.Context, in *ReqCertificateAdd, out *ReplyCertificateInfo) error {
	return h.CertificateServiceHandler.AddOne(ctx, in, out)
}

func (h *certificateServiceHandler) UpdateBase(ctx context.Context, in *ReqCertificateUpdate, out *ReplyInfo) error {
	return h.CertificateServiceHandler.UpdateBase(ctx, in, out)
}

func (h *certificateServiceHandler) RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.CertificateServiceHandler.RemoveOne(ctx, in, out)
}

func (h *certificateServiceHandler) GetOne(ctx context.Context, in *RequestInfo, out *ReplyCertificateInfo) error {
	return h.CertificateServiceHandler.GetOne(ctx, in, out)
}

func (h *certificateServiceHandler) Search(ctx context.Context, in *RequestInfo, out *ReplyCertificateList) error {
	return h.CertificateServiceHandler.Search(ctx, in, out)
}

func (h *certificateServiceHandler) GetListByFilter(ctx context.Context, in *RequestFilter, out *ReplyCertificateList) error {
	return h.CertificateServiceHandler.GetListByFilter(ctx, in, out)
}

func (h *certificateServiceHandler) GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error {
	return h.CertificateServiceHandler.GetStatistic(ctx, in, out)
}

func (h *certificateServiceHandler) UpdateByFilter(ctx context.Context, in *RequestUpdate, out *ReplyInfo) error {
	return h.CertificateServiceHandler.UpdateByFilter(ctx, in, out)
}

func (h *certificateServiceHandler) UpdateStatus(ctx context.Context, in *RequestIntFlag, out *ReplyInfo) error {
	return h.CertificateServiceHandler.UpdateStatus(ctx, in, out)
}
