// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/album/album.proto

package album

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AlbumService service

type AlbumService interface {
	AddOne(ctx context.Context, in *ReqAlbumAdd, opts ...client.CallOption) (*ReplyAlbumInfo, error)
	UpdateBase(ctx context.Context, in *ReqAlbumUpdate, opts ...client.CallOption) (*ReplyInfo, error)
	RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
	GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyAlbumInfo, error)
	Search(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyAlbumList, error)
	GetListByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyAlbumList, error)
	GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error)
	UpdateByFilter(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyInfo, error)
	UpdateStatus(ctx context.Context, in *RequestIntFlag, opts ...client.CallOption) (*ReplyInfo, error)
	AppendAsset(ctx context.Context, in *RequestList, opts ...client.CallOption) (*ReplyList, error)
	SubtractAsset(ctx context.Context, in *RequestList, opts ...client.CallOption) (*ReplyList, error)
}

type albumService struct {
	c    client.Client
	name string
}

func NewAlbumService(name string, c client.Client) AlbumService {
	return &albumService{
		c:    c,
		name: name,
	}
}

func (c *albumService) AddOne(ctx context.Context, in *ReqAlbumAdd, opts ...client.CallOption) (*ReplyAlbumInfo, error) {
	req := c.c.NewRequest(c.name, "AlbumService.AddOne", in)
	out := new(ReplyAlbumInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumService) UpdateBase(ctx context.Context, in *ReqAlbumUpdate, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "AlbumService.UpdateBase", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumService) RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "AlbumService.RemoveOne", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumService) GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyAlbumInfo, error) {
	req := c.c.NewRequest(c.name, "AlbumService.GetOne", in)
	out := new(ReplyAlbumInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumService) Search(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyAlbumList, error) {
	req := c.c.NewRequest(c.name, "AlbumService.Search", in)
	out := new(ReplyAlbumList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumService) GetListByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyAlbumList, error) {
	req := c.c.NewRequest(c.name, "AlbumService.GetListByFilter", in)
	out := new(ReplyAlbumList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumService) GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error) {
	req := c.c.NewRequest(c.name, "AlbumService.GetStatistic", in)
	out := new(ReplyStatistic)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumService) UpdateByFilter(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "AlbumService.UpdateByFilter", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumService) UpdateStatus(ctx context.Context, in *RequestIntFlag, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "AlbumService.UpdateStatus", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumService) AppendAsset(ctx context.Context, in *RequestList, opts ...client.CallOption) (*ReplyList, error) {
	req := c.c.NewRequest(c.name, "AlbumService.AppendAsset", in)
	out := new(ReplyList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumService) SubtractAsset(ctx context.Context, in *RequestList, opts ...client.CallOption) (*ReplyList, error) {
	req := c.c.NewRequest(c.name, "AlbumService.SubtractAsset", in)
	out := new(ReplyList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AlbumService service

type AlbumServiceHandler interface {
	AddOne(context.Context, *ReqAlbumAdd, *ReplyAlbumInfo) error
	UpdateBase(context.Context, *ReqAlbumUpdate, *ReplyInfo) error
	RemoveOne(context.Context, *RequestInfo, *ReplyInfo) error
	GetOne(context.Context, *RequestInfo, *ReplyAlbumInfo) error
	Search(context.Context, *RequestInfo, *ReplyAlbumList) error
	GetListByFilter(context.Context, *RequestFilter, *ReplyAlbumList) error
	GetStatistic(context.Context, *RequestFilter, *ReplyStatistic) error
	UpdateByFilter(context.Context, *RequestUpdate, *ReplyInfo) error
	UpdateStatus(context.Context, *RequestIntFlag, *ReplyInfo) error
	AppendAsset(context.Context, *RequestList, *ReplyList) error
	SubtractAsset(context.Context, *RequestList, *ReplyList) error
}

func RegisterAlbumServiceHandler(s server.Server, hdlr AlbumServiceHandler, opts ...server.HandlerOption) error {
	type albumService interface {
		AddOne(ctx context.Context, in *ReqAlbumAdd, out *ReplyAlbumInfo) error
		UpdateBase(ctx context.Context, in *ReqAlbumUpdate, out *ReplyInfo) error
		RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
		GetOne(ctx context.Context, in *RequestInfo, out *ReplyAlbumInfo) error
		Search(ctx context.Context, in *RequestInfo, out *ReplyAlbumList) error
		GetListByFilter(ctx context.Context, in *RequestFilter, out *ReplyAlbumList) error
		GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error
		UpdateByFilter(ctx context.Context, in *RequestUpdate, out *ReplyInfo) error
		UpdateStatus(ctx context.Context, in *RequestIntFlag, out *ReplyInfo) error
		AppendAsset(ctx context.Context, in *RequestList, out *ReplyList) error
		SubtractAsset(ctx context.Context, in *RequestList, out *ReplyList) error
	}
	type AlbumService struct {
		albumService
	}
	h := &albumServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AlbumService{h}, opts...))
}

type albumServiceHandler struct {
	AlbumServiceHandler
}

func (h *albumServiceHandler) AddOne(ctx context.Context, in *ReqAlbumAdd, out *ReplyAlbumInfo) error {
	return h.AlbumServiceHandler.AddOne(ctx, in, out)
}

func (h *albumServiceHandler) UpdateBase(ctx context.Context, in *ReqAlbumUpdate, out *ReplyInfo) error {
	return h.AlbumServiceHandler.UpdateBase(ctx, in, out)
}

func (h *albumServiceHandler) RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.AlbumServiceHandler.RemoveOne(ctx, in, out)
}

func (h *albumServiceHandler) GetOne(ctx context.Context, in *RequestInfo, out *ReplyAlbumInfo) error {
	return h.AlbumServiceHandler.GetOne(ctx, in, out)
}

func (h *albumServiceHandler) Search(ctx context.Context, in *RequestInfo, out *ReplyAlbumList) error {
	return h.AlbumServiceHandler.Search(ctx, in, out)
}

func (h *albumServiceHandler) GetListByFilter(ctx context.Context, in *RequestFilter, out *ReplyAlbumList) error {
	return h.AlbumServiceHandler.GetListByFilter(ctx, in, out)
}

func (h *albumServiceHandler) GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error {
	return h.AlbumServiceHandler.GetStatistic(ctx, in, out)
}

func (h *albumServiceHandler) UpdateByFilter(ctx context.Context, in *RequestUpdate, out *ReplyInfo) error {
	return h.AlbumServiceHandler.UpdateByFilter(ctx, in, out)
}

func (h *albumServiceHandler) UpdateStatus(ctx context.Context, in *RequestIntFlag, out *ReplyInfo) error {
	return h.AlbumServiceHandler.UpdateStatus(ctx, in, out)
}

func (h *albumServiceHandler) AppendAsset(ctx context.Context, in *RequestList, out *ReplyList) error {
	return h.AlbumServiceHandler.AppendAsset(ctx, in, out)
}

func (h *albumServiceHandler) SubtractAsset(ctx context.Context, in *RequestList, out *ReplyList) error {
	return h.AlbumServiceHandler.SubtractAsset(ctx, in, out)
}
