// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/album/page.proto

package album

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for PageService service

type PageService interface {
	AddOne(ctx context.Context, in *ReqPageAdd, opts ...client.CallOption) (*ReplyPageInfo, error)
	UpdateBase(ctx context.Context, in *ReqPageUpdate, opts ...client.CallOption) (*ReplyInfo, error)
	RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
	GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyPageInfo, error)
	Search(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyPageList, error)
	GetListBy(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyPageList, error)
	GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error)
	UpdateBy(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyInfo, error)
	SetContent(ctx context.Context, in *ReqPageContent, opts ...client.CallOption) (*ReplyPageContents, error)
}

type pageService struct {
	c    client.Client
	name string
}

func NewPageService(name string, c client.Client) PageService {
	return &pageService{
		c:    c,
		name: name,
	}
}

func (c *pageService) AddOne(ctx context.Context, in *ReqPageAdd, opts ...client.CallOption) (*ReplyPageInfo, error) {
	req := c.c.NewRequest(c.name, "PageService.AddOne", in)
	out := new(ReplyPageInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageService) UpdateBase(ctx context.Context, in *ReqPageUpdate, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "PageService.UpdateBase", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageService) RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "PageService.RemoveOne", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageService) GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyPageInfo, error) {
	req := c.c.NewRequest(c.name, "PageService.GetOne", in)
	out := new(ReplyPageInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageService) Search(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyPageList, error) {
	req := c.c.NewRequest(c.name, "PageService.Search", in)
	out := new(ReplyPageList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageService) GetListBy(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyPageList, error) {
	req := c.c.NewRequest(c.name, "PageService.GetListBy", in)
	out := new(ReplyPageList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageService) GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error) {
	req := c.c.NewRequest(c.name, "PageService.GetStatistic", in)
	out := new(ReplyStatistic)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageService) UpdateBy(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "PageService.UpdateBy", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageService) SetContent(ctx context.Context, in *ReqPageContent, opts ...client.CallOption) (*ReplyPageContents, error) {
	req := c.c.NewRequest(c.name, "PageService.SetContent", in)
	out := new(ReplyPageContents)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PageService service

type PageServiceHandler interface {
	AddOne(context.Context, *ReqPageAdd, *ReplyPageInfo) error
	UpdateBase(context.Context, *ReqPageUpdate, *ReplyInfo) error
	RemoveOne(context.Context, *RequestInfo, *ReplyInfo) error
	GetOne(context.Context, *RequestInfo, *ReplyPageInfo) error
	Search(context.Context, *RequestInfo, *ReplyPageList) error
	GetListBy(context.Context, *RequestFilter, *ReplyPageList) error
	GetStatistic(context.Context, *RequestFilter, *ReplyStatistic) error
	UpdateBy(context.Context, *RequestUpdate, *ReplyInfo) error
	SetContent(context.Context, *ReqPageContent, *ReplyPageContents) error
}

func RegisterPageServiceHandler(s server.Server, hdlr PageServiceHandler, opts ...server.HandlerOption) error {
	type pageService interface {
		AddOne(ctx context.Context, in *ReqPageAdd, out *ReplyPageInfo) error
		UpdateBase(ctx context.Context, in *ReqPageUpdate, out *ReplyInfo) error
		RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
		GetOne(ctx context.Context, in *RequestInfo, out *ReplyPageInfo) error
		Search(ctx context.Context, in *RequestInfo, out *ReplyPageList) error
		GetListBy(ctx context.Context, in *RequestFilter, out *ReplyPageList) error
		GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error
		UpdateBy(ctx context.Context, in *RequestUpdate, out *ReplyInfo) error
		SetContent(ctx context.Context, in *ReqPageContent, out *ReplyPageContents) error
	}
	type PageService struct {
		pageService
	}
	h := &pageServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PageService{h}, opts...))
}

type pageServiceHandler struct {
	PageServiceHandler
}

func (h *pageServiceHandler) AddOne(ctx context.Context, in *ReqPageAdd, out *ReplyPageInfo) error {
	return h.PageServiceHandler.AddOne(ctx, in, out)
}

func (h *pageServiceHandler) UpdateBase(ctx context.Context, in *ReqPageUpdate, out *ReplyInfo) error {
	return h.PageServiceHandler.UpdateBase(ctx, in, out)
}

func (h *pageServiceHandler) RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.PageServiceHandler.RemoveOne(ctx, in, out)
}

func (h *pageServiceHandler) GetOne(ctx context.Context, in *RequestInfo, out *ReplyPageInfo) error {
	return h.PageServiceHandler.GetOne(ctx, in, out)
}

func (h *pageServiceHandler) Search(ctx context.Context, in *RequestInfo, out *ReplyPageList) error {
	return h.PageServiceHandler.Search(ctx, in, out)
}

func (h *pageServiceHandler) GetListBy(ctx context.Context, in *RequestFilter, out *ReplyPageList) error {
	return h.PageServiceHandler.GetListBy(ctx, in, out)
}

func (h *pageServiceHandler) GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error {
	return h.PageServiceHandler.GetStatistic(ctx, in, out)
}

func (h *pageServiceHandler) UpdateBy(ctx context.Context, in *RequestUpdate, out *ReplyInfo) error {
	return h.PageServiceHandler.UpdateBy(ctx, in, out)
}

func (h *pageServiceHandler) SetContent(ctx context.Context, in *ReqPageContent, out *ReplyPageContents) error {
	return h.PageServiceHandler.SetContent(ctx, in, out)
}
