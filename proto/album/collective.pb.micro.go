// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/album/collective.proto

package album

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for CollectiveService service

type CollectiveService interface {
	AddOne(ctx context.Context, in *ReqCollectiveAdd, opts ...client.CallOption) (*ReplyCollectiveInfo, error)
	UpdateBase(ctx context.Context, in *ReqCollectiveUpdate, opts ...client.CallOption) (*ReplyInfo, error)
	RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
	GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyCollectiveInfo, error)
	Search(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyCollectiveList, error)
	GetListByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyCollectiveList, error)
	GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error)
	UpdateByFilter(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyInfo, error)
	UpdateStatus(ctx context.Context, in *RequestIntFlag, opts ...client.CallOption) (*ReplyInfo, error)
	AppendAsset(ctx context.Context, in *RequestList, opts ...client.CallOption) (*ReplyList, error)
	SubtractAsset(ctx context.Context, in *RequestList, opts ...client.CallOption) (*ReplyList, error)
}

type collectiveService struct {
	c    client.Client
	name string
}

func NewCollectiveService(name string, c client.Client) CollectiveService {
	return &collectiveService{
		c:    c,
		name: name,
	}
}

func (c *collectiveService) AddOne(ctx context.Context, in *ReqCollectiveAdd, opts ...client.CallOption) (*ReplyCollectiveInfo, error) {
	req := c.c.NewRequest(c.name, "CollectiveService.AddOne", in)
	out := new(ReplyCollectiveInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectiveService) UpdateBase(ctx context.Context, in *ReqCollectiveUpdate, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "CollectiveService.UpdateBase", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectiveService) RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "CollectiveService.RemoveOne", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectiveService) GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyCollectiveInfo, error) {
	req := c.c.NewRequest(c.name, "CollectiveService.GetOne", in)
	out := new(ReplyCollectiveInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectiveService) Search(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyCollectiveList, error) {
	req := c.c.NewRequest(c.name, "CollectiveService.Search", in)
	out := new(ReplyCollectiveList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectiveService) GetListByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyCollectiveList, error) {
	req := c.c.NewRequest(c.name, "CollectiveService.GetListByFilter", in)
	out := new(ReplyCollectiveList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectiveService) GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error) {
	req := c.c.NewRequest(c.name, "CollectiveService.GetStatistic", in)
	out := new(ReplyStatistic)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectiveService) UpdateByFilter(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "CollectiveService.UpdateByFilter", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectiveService) UpdateStatus(ctx context.Context, in *RequestIntFlag, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "CollectiveService.UpdateStatus", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectiveService) AppendAsset(ctx context.Context, in *RequestList, opts ...client.CallOption) (*ReplyList, error) {
	req := c.c.NewRequest(c.name, "CollectiveService.AppendAsset", in)
	out := new(ReplyList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectiveService) SubtractAsset(ctx context.Context, in *RequestList, opts ...client.CallOption) (*ReplyList, error) {
	req := c.c.NewRequest(c.name, "CollectiveService.SubtractAsset", in)
	out := new(ReplyList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CollectiveService service

type CollectiveServiceHandler interface {
	AddOne(context.Context, *ReqCollectiveAdd, *ReplyCollectiveInfo) error
	UpdateBase(context.Context, *ReqCollectiveUpdate, *ReplyInfo) error
	RemoveOne(context.Context, *RequestInfo, *ReplyInfo) error
	GetOne(context.Context, *RequestInfo, *ReplyCollectiveInfo) error
	Search(context.Context, *RequestInfo, *ReplyCollectiveList) error
	GetListByFilter(context.Context, *RequestFilter, *ReplyCollectiveList) error
	GetStatistic(context.Context, *RequestFilter, *ReplyStatistic) error
	UpdateByFilter(context.Context, *RequestUpdate, *ReplyInfo) error
	UpdateStatus(context.Context, *RequestIntFlag, *ReplyInfo) error
	AppendAsset(context.Context, *RequestList, *ReplyList) error
	SubtractAsset(context.Context, *RequestList, *ReplyList) error
}

func RegisterCollectiveServiceHandler(s server.Server, hdlr CollectiveServiceHandler, opts ...server.HandlerOption) error {
	type collectiveService interface {
		AddOne(ctx context.Context, in *ReqCollectiveAdd, out *ReplyCollectiveInfo) error
		UpdateBase(ctx context.Context, in *ReqCollectiveUpdate, out *ReplyInfo) error
		RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
		GetOne(ctx context.Context, in *RequestInfo, out *ReplyCollectiveInfo) error
		Search(ctx context.Context, in *RequestInfo, out *ReplyCollectiveList) error
		GetListByFilter(ctx context.Context, in *RequestFilter, out *ReplyCollectiveList) error
		GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error
		UpdateByFilter(ctx context.Context, in *RequestUpdate, out *ReplyInfo) error
		UpdateStatus(ctx context.Context, in *RequestIntFlag, out *ReplyInfo) error
		AppendAsset(ctx context.Context, in *RequestList, out *ReplyList) error
		SubtractAsset(ctx context.Context, in *RequestList, out *ReplyList) error
	}
	type CollectiveService struct {
		collectiveService
	}
	h := &collectiveServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CollectiveService{h}, opts...))
}

type collectiveServiceHandler struct {
	CollectiveServiceHandler
}

func (h *collectiveServiceHandler) AddOne(ctx context.Context, in *ReqCollectiveAdd, out *ReplyCollectiveInfo) error {
	return h.CollectiveServiceHandler.AddOne(ctx, in, out)
}

func (h *collectiveServiceHandler) UpdateBase(ctx context.Context, in *ReqCollectiveUpdate, out *ReplyInfo) error {
	return h.CollectiveServiceHandler.UpdateBase(ctx, in, out)
}

func (h *collectiveServiceHandler) RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.CollectiveServiceHandler.RemoveOne(ctx, in, out)
}

func (h *collectiveServiceHandler) GetOne(ctx context.Context, in *RequestInfo, out *ReplyCollectiveInfo) error {
	return h.CollectiveServiceHandler.GetOne(ctx, in, out)
}

func (h *collectiveServiceHandler) Search(ctx context.Context, in *RequestInfo, out *ReplyCollectiveList) error {
	return h.CollectiveServiceHandler.Search(ctx, in, out)
}

func (h *collectiveServiceHandler) GetListByFilter(ctx context.Context, in *RequestFilter, out *ReplyCollectiveList) error {
	return h.CollectiveServiceHandler.GetListByFilter(ctx, in, out)
}

func (h *collectiveServiceHandler) GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error {
	return h.CollectiveServiceHandler.GetStatistic(ctx, in, out)
}

func (h *collectiveServiceHandler) UpdateByFilter(ctx context.Context, in *RequestUpdate, out *ReplyInfo) error {
	return h.CollectiveServiceHandler.UpdateByFilter(ctx, in, out)
}

func (h *collectiveServiceHandler) UpdateStatus(ctx context.Context, in *RequestIntFlag, out *ReplyInfo) error {
	return h.CollectiveServiceHandler.UpdateStatus(ctx, in, out)
}

func (h *collectiveServiceHandler) AppendAsset(ctx context.Context, in *RequestList, out *ReplyList) error {
	return h.CollectiveServiceHandler.AppendAsset(ctx, in, out)
}

func (h *collectiveServiceHandler) SubtractAsset(ctx context.Context, in *RequestList, out *ReplyList) error {
	return h.CollectiveServiceHandler.SubtractAsset(ctx, in, out)
}
