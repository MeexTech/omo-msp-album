// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/album/style.proto

package album

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for StyleService service

type StyleService interface {
	AddOne(ctx context.Context, in *ReqStyleAdd, opts ...client.CallOption) (*ReplyStyleInfo, error)
	UpdateBase(ctx context.Context, in *ReqStyleUpdate, opts ...client.CallOption) (*ReplyInfo, error)
	RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
	GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyStyleInfo, error)
	Search(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyStyleList, error)
	GetListByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStyleList, error)
	GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error)
	UpdateByFilter(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyInfo, error)
	AppendSlot(ctx context.Context, in *RequestList, opts ...client.CallOption) (*ReplyList, error)
	SubtractSlot(ctx context.Context, in *RequestList, opts ...client.CallOption) (*ReplyList, error)
}

type styleService struct {
	c    client.Client
	name string
}

func NewStyleService(name string, c client.Client) StyleService {
	return &styleService{
		c:    c,
		name: name,
	}
}

func (c *styleService) AddOne(ctx context.Context, in *ReqStyleAdd, opts ...client.CallOption) (*ReplyStyleInfo, error) {
	req := c.c.NewRequest(c.name, "StyleService.AddOne", in)
	out := new(ReplyStyleInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *styleService) UpdateBase(ctx context.Context, in *ReqStyleUpdate, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "StyleService.UpdateBase", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *styleService) RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "StyleService.RemoveOne", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *styleService) GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyStyleInfo, error) {
	req := c.c.NewRequest(c.name, "StyleService.GetOne", in)
	out := new(ReplyStyleInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *styleService) Search(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyStyleList, error) {
	req := c.c.NewRequest(c.name, "StyleService.Search", in)
	out := new(ReplyStyleList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *styleService) GetListByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStyleList, error) {
	req := c.c.NewRequest(c.name, "StyleService.GetListByFilter", in)
	out := new(ReplyStyleList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *styleService) GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error) {
	req := c.c.NewRequest(c.name, "StyleService.GetStatistic", in)
	out := new(ReplyStatistic)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *styleService) UpdateByFilter(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "StyleService.UpdateByFilter", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *styleService) AppendSlot(ctx context.Context, in *RequestList, opts ...client.CallOption) (*ReplyList, error) {
	req := c.c.NewRequest(c.name, "StyleService.AppendSlot", in)
	out := new(ReplyList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *styleService) SubtractSlot(ctx context.Context, in *RequestList, opts ...client.CallOption) (*ReplyList, error) {
	req := c.c.NewRequest(c.name, "StyleService.SubtractSlot", in)
	out := new(ReplyList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StyleService service

type StyleServiceHandler interface {
	AddOne(context.Context, *ReqStyleAdd, *ReplyStyleInfo) error
	UpdateBase(context.Context, *ReqStyleUpdate, *ReplyInfo) error
	RemoveOne(context.Context, *RequestInfo, *ReplyInfo) error
	GetOne(context.Context, *RequestInfo, *ReplyStyleInfo) error
	Search(context.Context, *RequestInfo, *ReplyStyleList) error
	GetListByFilter(context.Context, *RequestFilter, *ReplyStyleList) error
	GetStatistic(context.Context, *RequestFilter, *ReplyStatistic) error
	UpdateByFilter(context.Context, *RequestUpdate, *ReplyInfo) error
	AppendSlot(context.Context, *RequestList, *ReplyList) error
	SubtractSlot(context.Context, *RequestList, *ReplyList) error
}

func RegisterStyleServiceHandler(s server.Server, hdlr StyleServiceHandler, opts ...server.HandlerOption) error {
	type styleService interface {
		AddOne(ctx context.Context, in *ReqStyleAdd, out *ReplyStyleInfo) error
		UpdateBase(ctx context.Context, in *ReqStyleUpdate, out *ReplyInfo) error
		RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
		GetOne(ctx context.Context, in *RequestInfo, out *ReplyStyleInfo) error
		Search(ctx context.Context, in *RequestInfo, out *ReplyStyleList) error
		GetListByFilter(ctx context.Context, in *RequestFilter, out *ReplyStyleList) error
		GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error
		UpdateByFilter(ctx context.Context, in *RequestUpdate, out *ReplyInfo) error
		AppendSlot(ctx context.Context, in *RequestList, out *ReplyList) error
		SubtractSlot(ctx context.Context, in *RequestList, out *ReplyList) error
	}
	type StyleService struct {
		styleService
	}
	h := &styleServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&StyleService{h}, opts...))
}

type styleServiceHandler struct {
	StyleServiceHandler
}

func (h *styleServiceHandler) AddOne(ctx context.Context, in *ReqStyleAdd, out *ReplyStyleInfo) error {
	return h.StyleServiceHandler.AddOne(ctx, in, out)
}

func (h *styleServiceHandler) UpdateBase(ctx context.Context, in *ReqStyleUpdate, out *ReplyInfo) error {
	return h.StyleServiceHandler.UpdateBase(ctx, in, out)
}

func (h *styleServiceHandler) RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.StyleServiceHandler.RemoveOne(ctx, in, out)
}

func (h *styleServiceHandler) GetOne(ctx context.Context, in *RequestInfo, out *ReplyStyleInfo) error {
	return h.StyleServiceHandler.GetOne(ctx, in, out)
}

func (h *styleServiceHandler) Search(ctx context.Context, in *RequestInfo, out *ReplyStyleList) error {
	return h.StyleServiceHandler.Search(ctx, in, out)
}

func (h *styleServiceHandler) GetListByFilter(ctx context.Context, in *RequestFilter, out *ReplyStyleList) error {
	return h.StyleServiceHandler.GetListByFilter(ctx, in, out)
}

func (h *styleServiceHandler) GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error {
	return h.StyleServiceHandler.GetStatistic(ctx, in, out)
}

func (h *styleServiceHandler) UpdateByFilter(ctx context.Context, in *RequestUpdate, out *ReplyInfo) error {
	return h.StyleServiceHandler.UpdateByFilter(ctx, in, out)
}

func (h *styleServiceHandler) AppendSlot(ctx context.Context, in *RequestList, out *ReplyList) error {
	return h.StyleServiceHandler.AppendSlot(ctx, in, out)
}

func (h *styleServiceHandler) SubtractSlot(ctx context.Context, in *RequestList, out *ReplyList) error {
	return h.StyleServiceHandler.SubtractSlot(ctx, in, out)
}
